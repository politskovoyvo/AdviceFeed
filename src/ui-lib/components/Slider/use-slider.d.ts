import { CSSProperties, DOMAttributes, HTMLAttributes, KeyboardEvent, KeyboardEventHandler, Ref } from 'react';
import { IUseSliderProps } from './models';
export type TUseSliderReturn = ReturnType<typeof useSlider>;
export declare function useSlider(props: IUseSliderProps): {
    getInputProps: (inputProps: {} | undefined, ref: Ref<HTMLInputElement>) => {
        name: string | undefined;
        type: string;
        ref: Ref<HTMLInputElement>;
    };
    getTrackProps: (trackProps: {} | undefined, ref: Ref<HTMLDivElement>) => {
        'aria-pressed': boolean;
        'aria-disabled': boolean;
        ref: (node: HTMLDivElement | null) => void;
    };
    getThumbProps: (thumbProps: DOMAttributes<HTMLButtonElement> | undefined, ref: Ref<HTMLButtonElement>) => {
        role: string;
        'aria-pressed': boolean;
        'aria-valuemin': number;
        'aria-valuemax': number;
        'aria-valuenow': number;
        'aria-orientation': import("./models").TSliderOrientation;
        'aria-disabled': boolean;
        'aria-readonly': boolean;
        style: {
            left: string;
        };
        onKeyDown: (event: KeyboardEvent<HTMLButtonElement>) => void;
        ref: (node: HTMLButtonElement | null) => void;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLButtonElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLButtonElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLButtonElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPress?: KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPressCapture?: KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUp?: KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<HTMLButtonElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLButtonElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLButtonElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLButtonElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLButtonElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLButtonElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLButtonElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLButtonElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLButtonElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLButtonElement> | undefined;
    };
    getWrapProps: (wrapProps?: HTMLAttributes<HTMLDivElement>, ref?: Ref<HTMLDivElement>) => {
        tabIndex: number;
        'aria-pressed': boolean;
        'aria-disabled': boolean;
        style: CSSProperties;
        ref: (node: HTMLDivElement | null) => void;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        enterKeyHint?: "next" | "search" | "enter" | "done" | "go" | "previous" | "send" | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: import("react").AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "numeric" | "search" | "tel" | "url" | "email" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "listbox" | "grid" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
    };
    isDragging: boolean;
    thumbPercent: number;
    max: number;
    min: number;
    step: number;
    trackRef: import("react").RefObject<HTMLDivElement>;
    thumbRef: import("react").RefObject<HTMLButtonElement>;
    orientation: import("./models").TSliderOrientation;
    disabled: boolean;
};
